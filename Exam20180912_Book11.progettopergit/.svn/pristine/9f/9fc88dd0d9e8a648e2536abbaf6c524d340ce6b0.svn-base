package it.polito.oop.books;

import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;

public class Book {

	
	Map<String,Topic> mTopic=new HashMap<>();
	Map<String,ExerciseChapter> mCEsercizi=new HashMap<>();
	Map<String,TheoryChapter> mCTeoria=new HashMap<>();
	Topic t;
	List<Topic> lTopic= new LinkedList<>();
    /**
	 * Creates a new topic, if it does not exist yet, or returns a reference to the
	 * corresponding topic.
	 * 
	 * @param keyword the unique keyword of the topic
	 * @return the {@link Topic} associated to the keyword
	 * @throws BookException
	 */
	public Topic getTopic(String keyword) throws BookException {
		
		if(keyword==null || keyword=="") throw new BookException();
		
		if(mTopic.get(keyword)!=null) {
			return mTopic.get(keyword);
		}
		
	    return new Topic(keyword);
	}

	public Question createQuestion(String question, Topic mainTopic) {
		
		Question q=new Question(question,mainTopic);
        return q;
	}

	public TheoryChapter createTheoryChapter(String title, int numPages, String text) {
		
		TheoryChapter tc=new TheoryChapter(title,numPages,text);
		for(Topic t:tc.getTopics()) {
			lTopic.add(t);
		}
		mCTeoria.put(title, tc);
		
        return tc ;
	}

	public ExerciseChapter createExerciseChapter(String title, int numPages) {
		
		
		ExerciseChapter ec= new ExerciseChapter(title,numPages);
		mCEsercizi.put(title, ec);
		
		for(Topic t:ec.getTopics()) {
			lTopic.add(t);
		}
        return null;
	}

	public List<Topic> getAllTopics() {
		
        return lTopic;
	}

	public boolean checkTopics() {
		
		//Ho tutti i capitoli di esercizi
		
		
      //  return mCEsercizi.values().stream().allMatch(arg0);
        return true;
	}

	public Assignment newAssignment(String ID, ExerciseChapter chapter) {
		
		Assignment a=new Assignment(ID,chapter);
        return a;
	}
	
    /**
     * builds a map having as key the number of answers and 
     * as values the list of questions having that number of answers.
     * @return
     */
    public Map<Long,List<Question>> questionOptions(){
    	
        return null;
    }
}
